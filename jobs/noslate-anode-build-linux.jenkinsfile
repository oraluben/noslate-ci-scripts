def confs = ['x86_64', 'aarch64']

pipeline {
    agent any
    options {
        ansiColor('xterm')
    }
    stages {
        stage('generate-pipeline') {
            steps {
                script {
                    def jobs = [:]
                    for (conf in confs) {
                        def conf1 = conf
                        jobs["Build ${conf1}"] = {
                            node('nodejs && ' + conf1) {
                                stage(conf1 + " make binary") {
                                    dir('node') {
                                        git(branch: 'anode-v16.19.1-anode.1-staging',
                                            url: 'https://github.com/oraluben/node.git')
                                        script {
                                            docker.image('accc-registry.cn-hangzhou.cr.aliyuncs.com/noslate/build').inside {
                                                // npm will use ~/.npm as default cache dir,
                                                // however when jenkins' docker isn't configured properly,
                                                // e.g. `docker -u 1000:1000 ...` and username unset,
                                                // ~/.npm will be resolved as /.npm, and cause permission issue.
                                                // so we overwrite the user above.

                                                // This issue also affects some test,
                                                // so we build test dependencies here and test on host in the next step.
                                                sh '''
                                                source /opt/rh/devtoolset-8/enable
                                                rm -f *.tar*
                                                make clean || true
                                                make distclean || true
                                                ./configure
                                                make -j `nproc` binary
                                                make tar
                                                make tar-headers
                                                ./node -p 'process.versions'
                                                ./node -p 'require("./deps/npm/package.json").version'
                                                '''
                                            }
                                        }
                                        archiveArtifacts artifacts: '*.tar*', fingerprint: true
                                    }
                                }
                                stage(conf1 + " make test") {
                                    dir('node') {
                                        script {
                                            docker.image('accc-registry.cn-hangzhou.cr.aliyuncs.com/noslate/build').inside {
                                                // skipped tests:
                                                // test-cluster-shared-handle-bind-privileged-port.js,test-cluster-bind-privileged-port.js:
                                                //  in non-root env, docker container will still be granted capibility to bind priviledged ports, causing tests fail;
                                                // test-cluster-primary-kill.js,test-cluster-primary-error.js:
                                                //  root cause unknown, but these two are known to be flacky;
                                                // test-crypto-key-objects.js:
                                                //  root cause unknown, only fail on jenkins docker arm64
                                                sh '''
                                                source /opt/rh/devtoolset-8/enable
                                                CI_SKIP_TESTS=test-cluster-shared-handle-bind-privileged-port.js,test-cluster-bind-privileged-port.js,test-cluster-primary-kill.js,test-cluster-primary-error.js,test-crypto-key-objects.js make -j`nproc` test-only
                                                '''
                                            }
                                        }
                                    }
                                }
                                stage(conf1 + " ts") {
                                    script {
                                        dir('ts') {
                                            git(branch: 'main', url: 'https://github.com/microsoft/TypeScript.git')
                                        }
                                        docker.image('accc-registry.cn-hangzhou.cr.aliyuncs.com/noslate/build').inside {
                                            sh '''
                                            tar xf node/node-*-linux-*.tar.gz
                                            pushd node-*/bin
                                            export PATH=`pwd`:$PATH
                                            popd
                                            cd ts && npm i && npm test
                                            '''
                                        }
                                    }
                                }
                                stage(conf1 + " vue") {
                                    script {
                                        dir('vue') {
                                            git(branch: 'main', url: 'https://github.com/vuejs/vue.git')
                                        }
                                        docker.image('accc-registry.cn-hangzhou.cr.aliyuncs.com/noslate/build').inside {
                                            sh '''
                                            tar xf node/node-*-linux-*.tar.gz
                                            pushd node-*/bin
                                            export PATH=`pwd`:$PATH
                                            popd
                                            export PUPPETEER_SKIP_DOWNLOAD=1
                                            npm install -g pnpm
                                            cd vue && pnpm install && npm run ts-check && npm run test:types && npm run test:unit && npm run test:ssr && npm run test:sfc
                                            '''
                                        }
                                    }
                                }
                            }
                        }
                    }
                    parallel jobs
                }
            }
        }
    }
}
